・MVCモデル
Model-View-Controller (MVC)と呼ばれる方法論のことです。
アプリケーションを構成するコンポーネントが、
「モデル(Model)」・「ビュー(View)」・「コントローラ(Controller)」の
３つの部分に分けられています。
一般にモデルをJavaBeans,ビューをjsp,コントローラをServletが担当します。
このモデルの利点として、変更が容易になるという事があります。
一つのプログラムを変更しても他のプログラムに大きな影響を与えないので
手間が少なくなります。これは作業効率に直結するので、
MVCモデルを利用する利点となっています。

モデルはデータを扱います。データの格納、処理などを行います。
ビューは結果などを表示する部分です。出力担当です。
コントローラはユーザからのリクエストに応じてモデルやビューを制御します。入力担当です。

・フレームワークについて
楽に開発するためのルールです。このルールに従って作成することにより、
高い技術や知識がなくても開発できるようになります。
また、ルールに従って製作するので多人数でも作業がやりやすいという利点もあります。

・Spring Frameworkについて
拡張性が向上し、仕様変更対応力が向上することが魅力のフレームワークです。
全てのレイヤーの基盤となるDI×AOPコンテナを持ち、
各レイヤーをインターフェイスベースで疎結合連結させます。
これにより疎結合性を高め、テストやエラー対策などの開発効率を高めています。
クラス(ライブラリ)の動作に必要な他のクラスの生成をSpringが担います。生成されたクラス群は、
Springの設定ファイルにより自動的に結合されます。
これにより、クラスやライブラリ間の依存性が排除され、単体テストがやりやすくなります。
NetBeansでサポートされているため導入は苦労しないと思います。

・JavaServer Facesについて
webアプリケーションのインターフェイスを構築するためのフレームワークです。
テキストフィールドやボタンなどをJSPカスタムタグライブラリを使用して
表現することができ、それらに対してステートの保持や入力値のチェック、型変換
イベント制御、データモデルのマッピングといった機能を与えられます。
NetBeansでサポートされているため導入は苦労しないと思います。

・Play Franeworkについて
javaとScalaによって作られたWEBフレームワークです。
「Ruby on Rails」の影響を大きく受けており、似ている点が多くあります。
「コンパイルの遅さ」を解消し、コードの追加や修正が即座に反映されるようになります。
CPUやメモリーに負担が少なく、少ないリソースでアプリを動作させることができます。
高速で開発できるので費用に制限がある場合やスピード感のある開発を求めらでる
WEBサービスでは有利に働くでしょう。
Netbeansでサポートされていないので、自分で導入する必要があります。
NetBeans SBT Pluginを使うとNetBeansのScalaプロジェクトを生成することができます。